/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.9.0 (NJsonSchema v10.6.8.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming
// @ts-nocheck

import { AxiosManager, throwException, formatDateWithoutZone, isNullOrUndefinedOrEmpty } from 'utilities'

import axios, { AxiosError, AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

export enum Colors {
    Blue = "Blue",
    Green = "Green",
    Red = "Red",
    Yellow = "Yellow",
}

export class FullForm {

    public formName?: string | null = null;
	
    public owner?: Person = null;
	
    public users?: Person[] | null = null;
	
    constructor(data?: Partial<FullForm>) {
        Object.assign(this, data);
    }
}

export enum Gender {
    Male = "Male",
    Female = "Female",
}

export class Person {

    public firstName?: string | null = null;
	
    public familyName?: string | null = null;
	
    private _birthDate?: Date | null = null;

    public set birthDate(val: any) {
        this._birthDate = val && typeof val === "string" ? new Date(val) : val
    }
	
    public get birthDate(): Date {
        return this._birthDate;
    }
	
    public address?: string | null = null;
	
    public favoriteColors?: Colors[] | null = null;
	
    public gender?: Gender = null;
	
    constructor(data?: Partial<Person>) {
        Object.assign(this, data);
        Object.defineProperties(this, {
            _birthDate: { writable: true, enumerable: false },
            birthDate: {
                get: () => { return this._birthDate; },
                set: (val) => { this._birthDate = val && typeof val === "string" ? new Date(val) : val; },
                enumerable: true
            }
        });
    }
}

export class WeatherForecast {

    private _date?: Date = null;

    public set date(val: any) {
        this._date = val && typeof val === "string" ? new Date(val) : val
    }
	
    public get date(): Date {
        return this._date;
    }
	
    public temperatureC?: number = null;
	
    public readonly temperatureF?: number = null;
	
    public summary?: string | null = null;
	
    constructor(data?: Partial<WeatherForecast>) {
        Object.assign(this, data);
        Object.defineProperties(this, {
            _date: { writable: true, enumerable: false },
            date: {
                get: () => { return this._date; },
                set: (val) => { this._date = val && typeof val === "string" ? new Date(val) : val; },
                enumerable: true
            }
        });
    }
}

export class FullFormClient {
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string) {

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "/Web.API";

    }

    public get fullFormGETKey(){
        return "FullFormClient/api/FullForm";
    }

    /**
     * @return Success
     */
    fullFormGET(  cancelToken?: CancelToken | undefined): Promise<ApiResponse<FullForm>> {
        let url_ = this.baseUrl + "/api/FullForm";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        const limiterToken = sessionStorage.getItem("x-contextlimiter-token")

        if (limiterToken)
            options_.headers["x-contextlimiter-token"] = limiterToken;
		
		        return AxiosManager.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processFullFormGET(_response);
        });
    }

    protected processFullFormGET(response: AxiosResponse): Promise<ApiResponse<FullForm>> {
        const status = response.status;
        let _headers: any = {};

        if (response.headers && typeof response.headers === "object") {

            const limiterToken = response.headers["x-contextlimiter-token"]

            if (limiterToken){
                sessionStorage.setItem("x-contextlimiter-token", limiterToken);
            }
                
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = new FullForm(resultData200);
            return Promise.resolve<ApiResponse<FullForm>>(new ApiResponse<FullForm>(status, _headers, result200));

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ApiResponse<FullForm>>(new ApiResponse(status, _headers, null as any));
    }

    public get fullFormPOSTKey(){
        return "FullFormClient/api/FullForm";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    fullFormPOST(body: FullForm | undefined , cancelToken?: CancelToken | undefined): Promise<ApiResponse<FullForm>> {
        let url_ = this.baseUrl + "/api/FullForm";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body, (k,v)=> isNullOrUndefinedOrEmpty(v) ? undefined : v);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        const limiterToken = sessionStorage.getItem("x-contextlimiter-token")

        if (limiterToken)
            options_.headers["x-contextlimiter-token"] = limiterToken;
		
		        return AxiosManager.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processFullFormPOST(_response);
        });
    }

    protected processFullFormPOST(response: AxiosResponse): Promise<ApiResponse<FullForm>> {
        const status = response.status;
        let _headers: any = {};

        if (response.headers && typeof response.headers === "object") {

            const limiterToken = response.headers["x-contextlimiter-token"]

            if (limiterToken){
                sessionStorage.setItem("x-contextlimiter-token", limiterToken);
            }
                
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = new FullForm(resultData200);
            return Promise.resolve<ApiResponse<FullForm>>(new ApiResponse<FullForm>(status, _headers, result200));

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ApiResponse<FullForm>>(new ApiResponse(status, _headers, null as any));
    }
}

export class WeatherForecastClient {
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string) {

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "/Web.API";

    }

    public get getWeatherForecastKey(){
        return "WeatherForecastClient/WeatherForecast";
    }

    /**
     * @return Success
     */
    getWeatherForecast(  cancelToken?: CancelToken | undefined): Promise<ApiResponse<WeatherForecast[]>> {
        let url_ = this.baseUrl + "/WeatherForecast";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        const limiterToken = sessionStorage.getItem("x-contextlimiter-token")

        if (limiterToken)
            options_.headers["x-contextlimiter-token"] = limiterToken;
		
		        return AxiosManager.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetWeatherForecast(_response);
        });
    }

    protected processGetWeatherForecast(response: AxiosResponse): Promise<ApiResponse<WeatherForecast[]>> {
        const status = response.status;
        let _headers: any = {};

        if (response.headers && typeof response.headers === "object") {

            const limiterToken = response.headers["x-contextlimiter-token"]

            if (limiterToken){
                sessionStorage.setItem("x-contextlimiter-token", limiterToken);
            }
                
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(new WeatherForecast(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<ApiResponse<WeatherForecast[]>>(new ApiResponse<WeatherForecast[]>(status, _headers, result200));

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ApiResponse<WeatherForecast[]>>(new ApiResponse(status, _headers, null as any));
    }
}

export class ApiResponse<TResult> {
    status: number;
    headers: { [key: string]: any; };
    result: TResult;

    constructor(status: number, headers: { [key: string]: any; }, result: TResult)
    {
        this.status = status;
        this.headers = headers;
        this.result = result;
    }
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

