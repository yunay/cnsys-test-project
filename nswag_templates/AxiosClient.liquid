{% if HasOperations -%}
{% if GenerateClientInterfaces -%}
{% if ExportTypes %}export {% endif %}interface I{{ Class }} {
{%     for operation in Operations -%}
    {% template Client.Method.Documentation %}
    {{ operation.MethodAccessModifier }}{{ operation.ActualOperationName }}({% for parameter in operation.Parameters %}{{ parameter.VariableName }}{% if GenerateOptionalParameters and parameter.IsOptional %}?{% endif %}: {{ parameter.Type }}{{ parameter.TypePostfix }}{% if parameter.IsLast == false %}, {% endif %}{% endfor %}): Promise<{{ operation.ResultType }}>;
{%     endfor -%}}
{%- endif %}

{% if ExportTypes %}export {% endif %}class {{ Class }} {% if HasBaseClass %}extends {{ BaseClass }} {% endif %}{% if GenerateClientInterfaces %}implements I{{ Class }} {% endif %}{
    private baseUrl: string;
    protected jsonParseReviver: {% if SupportsStrictNullChecks %}((key: string, value: any) => any) | undefined{% else %}(key: string, value: any) => any{% endif %} = undefined;

{%- if HasExtendedConstructor == false %}
    constructor({% if HasConfigurationClass %}configuration: {{ ConfigurationClass }}, {% endif %}baseUrl?: string) {
{%-     if HasBaseClass %}
        super({% if HasConfigurationClass %}configuration{% endif %});
{%-     endif %}
{%-     if UseGetBaseUrlMethod %}
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : this.getBaseUrl("{{ BaseUrl }}");
{%-     else %}
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "{{ BaseUrl }}";
{%-     endif %}
    }
{%- endif %}
{% if HasExtensionCode -%}

    {{ ExtensionCode }}
{%- endif %}
{% for operation in Operations %}

    public get {{ operation.MethodAccessModifier }}{{ operation.ActualOperationName }}Key(){
        return "{{ Class }}/{{ operation.Path }}";
    }

    {% template Client.Method.Documentation %}
    {{ operation.MethodAccessModifier }}{{ operation.ActualOperationName }}({% for parameter in operation.Parameters %}{{ parameter.VariableName }}{% if GenerateOptionalParameters and parameter.IsOptional %}?{% endif %}: {{ parameter.Type }}{{ parameter.TypePostfix }}{% if parameter.IsLast == false %}, {% endif %}{% endfor %} {% if operation.Parameters.size > 0 %},{%endif%} cancelToken?: CancelToken | undefined): Promise<{{ operation.ResultType }}> {
        {% template Client.RequestUrl %}

{%     if operation.HasBody -%}
        {% template Client.RequestBody %}

{%     endif -%}
        let options_: AxiosRequestConfig = {
{%     if operation.HasBody -%}
            data: content_,
{%     endif -%}
{%     if operation.IsFile -%}
            responseType: "blob",
{%     endif -%}
            method: "{{ operation.HttpMethodUpper | upcase }}",
            url: url_,
            headers: {
{%     if operation.HasContent or operation.ConsumesFormUrlEncoded -%}
                "Content-Type": "{{ operation.Consumes }}",
{%     endif -%}
{%     if operation.HasResultType and operation.HasAcceptHeaderParameterParameter == false -%}
                "Accept": "{{ operation.Produces }}"
{%     endif -%}
            },
            cancelToken
        };

        const limiterToken = sessionStorage.getItem("x-contextlimiter-token")

        if (limiterToken)
            options_.headers["x-contextlimiter-token"] = limiterToken;
		{% comment %}
			Хедъри като If-None-Match и Cache-control се подават автоматично от browser-а. Поведението по подразбиране на шаблона замазваше подаваните от browser-а хедъри, затова написахме този override 
		{% endcomment %}
		{%     for parameter in operation.HeaderParameters -%}
if({{ parameter.VariableName }} !== undefined && {{ parameter.VariableName }} !== null){
			options_.headers["{{ parameter.Name }}"] = "" + {{ parameter.VariableName }};
		}
		{%     endfor -%}
        return AxiosManager.instance.request(options_).then((_response: AxiosResponse) => {
{%     if UseTransformResultMethod -%}
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.process{{ operation.ActualOperationNameUpper }}(_response));
{%     else -%}
            return this.process{{ operation.ActualOperationNameUpper }}(_response);
{%     endif -%}
        });
    }

    protected process{{ operation.ActualOperationNameUpper }}(response: AxiosResponse): Promise<{{ operation.ResultType }}> {
        const status = response.status;
        {% template Client.ProcessResponse %}
    }
{% endfor -%}
}
{%- endif %}